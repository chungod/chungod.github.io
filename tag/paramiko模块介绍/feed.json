{
    "version": "https://jsonfeed.org/version/1",
    "title": "Go Forward • All posts by \"paramiko模块介绍\" tag",
    "description": "欢迎来到我的博客(*^﹏^*),本人为新人,你可以阅读我的学习笔记并提出独到的见解~我们将互相学习,共同进步,望大佬们勿喷",
    "home_page_url": "https://chungod.github.io",
    "items": [
        {
            "id": "https://chungod.github.io/2021/05/02/paramiko%E6%A8%A1%E5%9D%97%E4%BB%8B%E7%BB%8D/",
            "url": "https://chungod.github.io/2021/05/02/paramiko%E6%A8%A1%E5%9D%97%E4%BB%8B%E7%BB%8D/",
            "title": "paramiko模块介绍",
            "date_published": "2021-05-02T11:54:29.000Z",
            "content_html": "<h2 id=\"paramiko模块介绍\"><a class=\"markdownIt-Anchor\" href=\"#paramiko模块介绍\">#</a> Paramiko 模块介绍</h2>\n<p>ssh 是一个协议，OpenSSH 是其中一个开源实现，paramiko 是 Python 的一个库，实现了 SSHv2 协议 (底层使用 cryptography)。</p>\n<p>有了 Paramiko 以后，我们就可以在 Python 代码中直接使用 SSH 协议对远程服务器执行操作，而不是通过 ssh 命令对远程服务器进行操作。</p>\n<p>由于 paramiko 属于第三方库，所以需要使用如下命令先行安装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install paramiko</span><br></pre></td></tr></table></figure>\n<p>paramiko 包含两个核心组件：SSHClient 和 SFTPClient。</p>\n<ul>\n<li>SSHClient 的作用类似于 Linux 的 ssh 命令，是对 SSH 会话的封装，该类封装了传输 (Transport)，通道 (Channel) 及 SFTPClient 建立的方法 (open_sftp)，通常用于执行远程命令。</li>\n<li>SFTPClient 的作用类似与 Linux 的 sftp 命令，是对 SFTP 客户端的封装，用以实现远程文件操作，如文件上传、下载、修改文件权限等操作。</li>\n</ul>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   \t\t\t Paramiko中的几个基础名词\t</span><br><span class=\"line\"><span class=\"number\">1</span>、Channel：是一种类Socket，一种安全的SSH传输通道；</span><br><span class=\"line\"><span class=\"number\">2</span>、Transport：是一种加密的会话，使用时会同步创建了一个加密的Tunnels(通道)，这个Tunnels叫做Channel；</span><br><span class=\"line\"><span class=\"number\">3</span>、Session：是client与Server保持连接的对象，用connect()/start_client()/start_server()开始会话。</span><br></pre></td></tr></table></figure>\n<h2 id=\"paramiko的基本使用\"><a class=\"markdownIt-Anchor\" href=\"#paramiko的基本使用\">#</a> Paramiko 的基本使用</h2>\n<h4 id=\"sshclient常用的方法介绍\"><a class=\"markdownIt-Anchor\" href=\"#sshclient常用的方法介绍\">#</a> SSHClient 常用的方法介绍</h4>\n<p><strong>connect()</strong>：实现远程服务器的连接与认证，对于该方法只有 hostname 是必传参数。</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">常用参数</span><br><span class=\"line\">hostname 连接的目标主机</span><br><span class=\"line\">port=SSH_PORT 指定端口</span><br><span class=\"line\">username=None 验证的用户名</span><br><span class=\"line\">password=None 验证的用户密码</span><br><span class=\"line\">pkey=None 私钥方式用于身份验证</span><br><span class=\"line\">key_filename=None 一个文件名或文件列表，指定私钥文件</span><br><span class=\"line\">timeout=None 可选的tcp连接超时时间</span><br><span class=\"line\">allow_agent=True, 是否允许连接到ssh代理，默认为True 允许</span><br><span class=\"line\">look_for_keys=True 是否在~/.ssh中搜索私钥文件，默认为True 允许</span><br><span class=\"line\">compress=False, 是否打开压缩</span><br></pre></td></tr></table></figure>\n<p><strong>set_missing_host_key_policy()</strong>：设置远程服务器没有在 know_hosts 文件中记录时的应对策略。目前支持三种策略：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">设置连接的远程主机没有本地主机密钥或HostKeys对象时的策略，目前支持三种：</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AutoAddPolicy 自动添加主机名及主机密钥到本地HostKeys对象，不依赖load_system_host_key的配置。即新建立ssh连接时不需要再输入yes或no进行确认</span><br><span class=\"line\">WarningPolicy 用于记录一个未知的主机密钥的python警告。并接受，功能上和AutoAddPolicy类似，但是会提示是新连接</span><br><span class=\"line\">RejectPolicy 自动拒绝未知的主机名和密钥，依赖load_system_host_key的配置。此为默认选项</span><br></pre></td></tr></table></figure>\n<p><strong>exec_command()</strong>：在远程服务器执行 Linux 命令的方法</p>\n<p><strong>open_sftp()</strong>：在当前 ssh 会话的基础上创建一个 sftp 会话。该方法会返回一个 SFTPClient 对象。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 利用SSHClient对象的open_sftp()方法，可以直接返回一个基于当前连接的sftp对象，可以进行文件的上传等操作.</span><br><span class=\"line\"></span><br><span class=\"line\">sftp = client.open_sftp()</span><br><span class=\"line\">sftp.put(&#x27;test.txt&#x27;,&#x27;text.txt&#x27;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"sshclient常用的方法举例\"><a class=\"markdownIt-Anchor\" href=\"#sshclient常用的方法举例\">#</a> SSHClient 常用的方法举例</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> paramiko</span><br><span class=\"line\">client = paramiko.SSHClient()  </span><br><span class=\"line\"><span class=\"comment\"># 实例化SSHClient</span></span><br><span class=\"line\">client.set_missing_host_key_policy(paramiko.AutoAddPolicy())</span><br><span class=\"line\"><span class=\"comment\"># 自动添加策略,保存服务器的主机名和密钥，如不添加,那么不在本地know_hosts文件中记录的文件无法连接</span></span><br><span class=\"line\">client.connect(hostname=<span class=\"string\">&#x27;10.7.5.238&#x27;</span>,port=<span class=\"number\">22</span>,username=<span class=\"string\">&#x27;root&#x27;</span>,password=<span class=\"string\">&#x27;123456&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 连接SSH服务端,以用户名和密码进行认证</span></span><br><span class=\"line\">stdin, stdout, stderr = client.exec_command(<span class=\"string\">&#x27;cat /root/flagvalue.txt&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># stdout为正确输出, stderr为错误输出, 同时是有一个变量有值</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(stdout.read().decode(<span class=\"string\">&#x27;utf-8&#x27;</span>))</span><br><span class=\"line\"><span class=\"comment\"># 打印执行结果</span></span><br><span class=\"line\">client.close()</span><br><span class=\"line\"><span class=\"comment\"># 关闭SSHClient</span></span><br></pre></td></tr></table></figure>\n<p>执行结果:</p>\n<p><img data-src=\"https://gitee.com/chungod/picture/raw/master/image/image-20210111092549417.png\" alt=\"image-20210111094748230\"></p>\n<p><strong>密钥连接方式</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 配置私人密钥文件位置</span></span><br><span class=\"line\">private = paramiko.RSAKey.from_private_key_file(<span class=\"string\">&#x27;/Users/ch/.ssh/id_rsa&#x27;</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">#实例化SSHClient</span></span><br><span class=\"line\">client = paramiko.SSHClient()</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">#自动添加策略，保存服务器的主机名和密钥信息，如果不添加，那么不再本地know_hosts文件中记录的主机将无法连接</span></span><br><span class=\"line\">client.set_missing_host_key_policy(paramiko.AutoAddPolicy())</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">#连接SSH服务端，以用户名和密码进行认证</span></span><br><span class=\"line\">client.connect(hostname=<span class=\"string\">&#x27;10.0.0.1&#x27;</span>,port=<span class=\"number\">22</span>,username=<span class=\"string\">&#x27;root&#x27;</span>,pkey=private)</span><br></pre></td></tr></table></figure>\n<p><strong>SSHClient 封装 Transport</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> paramiko</span><br><span class=\"line\"><span class=\"comment\">#创建一个通道</span></span><br><span class=\"line\">transport = paramiko.Transport((<span class=\"string\">&#x27;10.7.5.238&#x27;</span>,<span class=\"number\">22</span>))</span><br><span class=\"line\">tarnsport.connect(username=<span class=\"string\">&#x27;root&#x27;</span>, password=<span class=\"string\">&#x27;123&#x27;</span>)</span><br><span class=\"line\">ssh = paramiko.SSHClient()</span><br><span class=\"line\">ssh._transport = transport</span><br><span class=\"line\"></span><br><span class=\"line\">stdin, stdout, stderr = ssh.exec_command(<span class=\"string\">&#x27;cat /root/flag*.txt&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(stdout.read().decode(<span class=\"string\">&#x27;utf-8&#x27;</span>))</span><br><span class=\"line\">transport.close()</span><br></pre></td></tr></table></figure>\n<p>执行结果:</p>\n<p><img data-src=\"https://gitee.com/chungod/picture/raw/master/image/image-20210111092624833.png\" alt=\"image-20210111092549417\"></p>\n<h4 id=\"sftpclient常用方法介绍\"><a class=\"markdownIt-Anchor\" href=\"#sftpclient常用方法介绍\">#</a> SFTPClient 常用方法介绍</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SFTPCLient作为一个sftp的客户端对象，根据ssh传输协议的sftp会话，实现远程文件操作，如上传、下载、权限、状态</span><br><span class=\"line\"> </span><br><span class=\"line\">from_transport(cls,t) 创建一个已连通的SFTP客户端通道</span><br><span class=\"line\">put(localpath, remotepath, callback=None, confirm=True) 将本地文件上传到服务器 参数confirm：是否调用stat()方法检查文件状态，返回ls -l的结果</span><br><span class=\"line\">get(remotepath, localpath, callback=None) 从服务器下载文件到本地</span><br><span class=\"line\">mkdir() 在服务器上创建目录</span><br><span class=\"line\">remove() 在服务器上删除目录</span><br><span class=\"line\">rename() 在服务器上重命名目录</span><br><span class=\"line\">stat() 查看服务器文件状态</span><br><span class=\"line\">listdir() 列出服务器目录下的文件</span><br></pre></td></tr></table></figure>\n<h4 id=\"sftpclient常用方法举例\"><a class=\"markdownIt-Anchor\" href=\"#sftpclient常用方法举例\">#</a> SFTPClient 常用方法举例</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> paramiko</span><br><span class=\"line\"><span class=\"comment\"># 获取Transport实例</span></span><br><span class=\"line\">tran = paramiko.Transpor((<span class=\"string\">&#x27;10.7.5.238&#x27;</span>,<span class=\"number\">22</span>))</span><br><span class=\"line\"><span class=\"comment\"># 连接SSH服务端</span></span><br><span class=\"line\">tran.connect(username=<span class=\"string\">&#x27;root&#x27;</span>,password=<span class=\"string\">&#x27;123456&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取SFTP实例</span></span><br><span class=\"line\">sftp = paramiko.SFTPClient.from_transport(tran)</span><br><span class=\"line\"><span class=\"comment\"># 设置上传的文件/远程文件路径</span></span><br><span class=\"line\">localpath = <span class=\"string\">&#x27;/root/1.txt&#x27;</span></span><br><span class=\"line\">remotepath = <span class=\"string\">&#x27;/root/1.txt&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 执行上传动作</span></span><br><span class=\"line\">sftp.put(localpath, remotepath)</span><br><span class=\"line\"><span class=\"comment\"># 执行下载动作</span></span><br><span class=\"line\">sftp.get(remotepath, localpath)</span><br><span class=\"line\"></span><br><span class=\"line\">tran.close()</span><br></pre></td></tr></table></figure>\n<p>执行结果:</p>\n<p>客户端</p>\n<p><img data-src=\"https://gitee.com/chungod/picture/raw/master/image/image-20210111094758768.png\" alt=\"image-20210111094758768\"></p>\n<p>服务端</p>\n<p><img data-src=\"https://gitee.com/chungod/picture/raw/master/image/image-20210111094758768.png\" alt=\"image-20210111094758768\"></p>\n<h3 id=\"paramiko的综合使用例子\"><a class=\"markdownIt-Anchor\" href=\"#paramiko的综合使用例子\">#</a> Paramiko 的综合使用例子</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SSHConnection</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, host_dict</span>):</span></span><br><span class=\"line\">        self.host = host_dict[<span class=\"string\">&#x27;host&#x27;</span>]</span><br><span class=\"line\">        self.port = host_dict[<span class=\"string\">&#x27;port&#x27;</span>]</span><br><span class=\"line\">        self.username = host_dict[<span class=\"string\">&#x27;username&#x27;</span>]</span><br><span class=\"line\">        self.pwd = host_dict[<span class=\"string\">&#x27;pwd&#x27;</span>]</span><br><span class=\"line\">        self.__k = <span class=\"literal\">None</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">connect</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        transport = paramiko.Transport((self.host,self.port))</span><br><span class=\"line\">        transport.connect(username=self.username,password=self.pwd)</span><br><span class=\"line\">        self.__transport = transport</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">close</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        self.__transport.close()</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run_cmd</span>(<span class=\"params\">self, command</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">         执行shell命令,返回字典</span></span><br><span class=\"line\"><span class=\"string\">         return &#123;&#x27;color&#x27;: &#x27;red&#x27;,&#x27;res&#x27;:error&#125;或</span></span><br><span class=\"line\"><span class=\"string\">         return &#123;&#x27;color&#x27;: &#x27;green&#x27;, &#x27;res&#x27;:res&#125;</span></span><br><span class=\"line\"><span class=\"string\">        :param command:</span></span><br><span class=\"line\"><span class=\"string\">        :return:</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        ssh = paramiko.SSHClient()</span><br><span class=\"line\">        ssh._transport = self.__transport</span><br><span class=\"line\">        <span class=\"comment\"># 执行命令</span></span><br><span class=\"line\">        stdin, stdout, stderr = ssh.exec_command(command)</span><br><span class=\"line\">        <span class=\"comment\"># 获取命令结果</span></span><br><span class=\"line\">        res = unicode_utils.to_str(stdout.read())</span><br><span class=\"line\">        <span class=\"comment\"># 获取错误信息</span></span><br><span class=\"line\">        error = unicode_utils.to_str(stderr.read())</span><br><span class=\"line\">        <span class=\"comment\"># 如果有错误信息，返回error</span></span><br><span class=\"line\">        <span class=\"comment\"># 否则返回res</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> error.strip():</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;<span class=\"string\">&#x27;color&#x27;</span>:<span class=\"string\">&#x27;red&#x27;</span>,<span class=\"string\">&#x27;res&#x27;</span>:error&#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;<span class=\"string\">&#x27;color&#x27;</span>: <span class=\"string\">&#x27;green&#x27;</span>, <span class=\"string\">&#x27;res&#x27;</span>:res&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">upload</span>(<span class=\"params\">self,local_path, target_path</span>):</span></span><br><span class=\"line\">        <span class=\"comment\"># 连接，上传</span></span><br><span class=\"line\">        sftp = paramiko.SFTPClient.from_transport(self.__transport)</span><br><span class=\"line\">        <span class=\"comment\"># 将location.py 上传至服务器 /tmp/test.py</span></span><br><span class=\"line\">        sftp.put(local_path, target_path, confirm=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        <span class=\"comment\"># print(os.stat(local_path).st_mode)</span></span><br><span class=\"line\">        <span class=\"comment\"># 增加权限</span></span><br><span class=\"line\">        <span class=\"comment\"># sftp.chmod(target_path, os.stat(local_path).st_mode)</span></span><br><span class=\"line\">        sftp.chmod(target_path, <span class=\"number\">0o755</span>)  <span class=\"comment\"># 注意这里的权限是八进制的，八进制需要使用0o作为前缀</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">download</span>(<span class=\"params\">self,target_path, local_path</span>):</span></span><br><span class=\"line\">        <span class=\"comment\"># 连接，下载</span></span><br><span class=\"line\">        sftp = paramiko.SFTPClient.from_transport(self.__transport)</span><br><span class=\"line\">        <span class=\"comment\"># 将location.py 下载至服务器 /tmp/test.py</span></span><br><span class=\"line\">        sftp.get(target_path, local_path)</span><br><span class=\"line\">    <span class=\"comment\"># 销毁</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__del__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        self.close()　　</span><br><span class=\"line\"><span class=\"comment\">#unicode_utils.py</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">to_str</span>(<span class=\"params\">bytes_or_str</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    把byte类型转换为str</span></span><br><span class=\"line\"><span class=\"string\">    :param bytes_or_str:</span></span><br><span class=\"line\"><span class=\"string\">    :return:</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(bytes_or_str, <span class=\"built_in\">bytes</span>):</span><br><span class=\"line\">        value = bytes_or_str.decode(<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        value = bytes_or_str</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "paramiko模块介绍"
            ]
        }
    ]
}